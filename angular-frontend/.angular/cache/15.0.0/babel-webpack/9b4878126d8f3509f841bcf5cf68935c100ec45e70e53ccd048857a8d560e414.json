{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./../../services/employee.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction EmployeeListComponent_tr_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_15_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateEmployee(employee_r1.id));\n    });\n    i0.ɵɵtext(9, \" Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_15_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteEmployee(employee_r1.id));\n    });\n    i0.ɵɵtext(11, \" Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_15_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.employeeDetails(employee_r1.id));\n    });\n    i0.ɵɵtext(13, \" View\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const employee_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.firstName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.lastName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.emailId, \" \");\n  }\n}\n//generated from the command ng g c employee-list in the app folder\nexport class EmployeeListComponent {\n  constructor(employeeService, router) {\n    this.employeeService = employeeService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.getEmployees();\n  }\n  getEmployees() {\n    /**\r\n    Observable.subscribe\r\n    Le point commun entre tous les \"observables\" est la méthode subscribe qui permet de souscrire à un Observable\r\n    et être notifié des nouvelles valeurs, des erreurs ou de la fin du \"stream\".\r\n    import { interval } from 'rxjs';\r\n     ​\r\n    const data$ = interval(1000);\r\n    \r\n    data$.subscribe(value => console.log(value));\r\n    \r\n    Nous pouvons ensuite ajouter les \"callbacks\" de capture d'\"erreur\" ou de fin du \"stream\"\r\n    en passant un objet à la méthode subscribe avec les trois callbacks suivantes : next, error et complete.\r\n    \r\n    data$.subscribe({\r\n        next: value => console.log(value),\r\n        error: err => console.error(err),\r\n        complete: () => console.log('DONE!')\r\n    });\r\n    */\n    this.employeeService.getEmployeesList().subscribe(data => {\n      this.employees = data;\n    });\n  }\n  employeeDetails(id) {\n    this.router.navigate(['employee-details', id]);\n  }\n  updateEmployee(id) {\n    this.router.navigate(['update-employee', id]);\n  }\n  deleteEmployee(id) {\n    this.employeeService.deleteEmployee(id).subscribe(data => {\n      console.log(data);\n      this.getEmployees();\n    });\n  }\n  static #_ = this.ɵfac = function EmployeeListComponent_Factory(t) {\n    return new (t || EmployeeListComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EmployeeListComponent,\n    selectors: [[\"app-employee-list\"]],\n    decls: 16,\n    vars: 1,\n    consts: [[1, \"row\"], [1, \"table\", \"table-striped\", \"table-bordered\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-danger\", 2, \"margin-left\", \"10px\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 2, \"margin-left\", \"10px\", 3, \"click\"]],\n    template: function EmployeeListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \" Employee List\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"table\", 1)(4, \"thead\")(5, \"tr\")(6, \"th\");\n        i0.ɵɵtext(7, \" First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"th\");\n        i0.ɵɵtext(9, \" Last Name \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"th\");\n        i0.ɵɵtext(11, \" Email Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"th\");\n        i0.ɵɵtext(13, \" Actions \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"tbody\");\n        i0.ɵɵtemplate(15, EmployeeListComponent_tr_15_Template, 14, 3, \"tr\", 2);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngForOf\", ctx.employees);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;;IAcQA,0BAA0C;IACjCA,YAAyB;IAAAA,iBAAK;IACnCA,0BAAI;IAACA,YAAwB;IAAAA,iBAAK;IAClCA,0BAAI;IAACA,YAAuB;IAAAA,iBAAK;IACjCA,0BAAI;IACQA;MAAA;MAAA;MAAA;MAAA,OAAWA,oDAA2B;IAAA,EAAC;IAA4BA,uBAAM;IAAAA,iBAAS;IAC1FA,kCAAmG;IAA3FA;MAAA;MAAA;MAAA;MAAA,OAAWA,oDAA2B;IAAA,EAAC;IAAqDA,wBAAM;IAAAA,iBAAS;IACnHA,kCAAqG;IAA7FA;MAAA;MAAA;MAAA;MAAA,OAAWA,qDAA4B;IAAA,EAAC;IAAsDA,sBAAI;IAAAA,iBAAS;;;;IANlHA,eAAyB;IAAzBA,sDAAyB;IACzBA,eAAwB;IAAxBA,qDAAwB;IACxBA,eAAuB;IAAvBA,oDAAuB;;;ACNxC;AAOA,OAAM,MAAOC,qBAAqB;EAIjCC,YAAoBC,eAAgC,EAAUC,MAAc;IAAxD,oBAAe,GAAfD,eAAe;IAA2B,WAAM,GAANC,MAAM;EAAY;EAEhFC,QAAQ;IACP,IAAI,CAACC,YAAY,EAAE;EACpB;EAEQA,YAAY;IAEnB;;;;;;;;;;;;;;;;;;;IAmBA,IAAI,CAACH,eAAe,CAACI,gBAAgB,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACxD,IAAI,CAACC,SAAS,GAAGD,IAAI;IACtB,CAAC,CAAC;EACH;EAEAE,eAAe,CAACC,EAAU;IACzB,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,kBAAkB,EAAED,EAAE,CAAC,CAAC;EAC/C;EAEAE,cAAc,CAACF,EAAU;IACxB,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,iBAAiB,EAAED,EAAE,CAAC,CAAC;EAC9C;EAEAG,cAAc,CAACH,EAAS;IACvB,IAAI,CAACT,eAAe,CAACY,cAAc,CAACH,EAAE,CAAC,CAACJ,SAAS,CAAEC,IAAI,IAAG;MACzDO,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;MACjB,IAAI,CAACH,YAAY,EAAE;IACpB,CAAC,CAAC;EACH;EAAC;qBAjDWL,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAAiB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDlBlCtB,8BAAmB;QACVA,8BAAa;QAAAA,iBAAK;QAG3BA,gCAAoD;QAGnCA,2BAAU;QAAAA,iBAAK;QACpBA,0BAAI;QAACA,2BAAU;QAAAA,iBAAK;QACpBA,2BAAI;QAACA,0BAAQ;QAAAA,iBAAK;QAClBA,2BAAI;QAACA,0BAAQ;QAAAA,iBAAK;QAG1BA,8BAAO;QACHA,uEASK;QACTA,iBAAQ;;;QAVuBA,gBAAY;QAAZA,uCAAY","names":["i0","EmployeeListComponent","constructor","employeeService","router","ngOnInit","getEmployees","getEmployeesList","subscribe","data","employees","employeeDetails","id","navigate","updateEmployee","deleteEmployee","console","log","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Dev\\Java\\angular-frontend\\src\\app\\components\\employee-list\\employee-list.component.html","C:\\Dev\\Java\\angular-frontend\\src\\app\\components\\employee-list\\employee-list.component.ts"],"sourcesContent":["<div class = \"row\">\n    <h2> Employee List</h2>\n</div>\n\n<table class = \"table table-striped table-bordered\">\n    <thead>\n        <tr>\n            <th> First Name</th>\n            <th> Last Name </th>\n            <th> Email Id</th>\n            <th> Actions </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor = \"let employee of employees\" >\n            <td> {{ employee.firstName }} </td>\n            <td> {{ employee.lastName }} </td>\n            <td> {{ employee.emailId }} </td>\n            <td>\n                <button (click) = \"updateEmployee(employee.id)\" class = \"btn btn-primary\"> Update</button>\n                <button (click) = \"deleteEmployee(employee.id)\" class = \"btn btn-danger\" style=\"margin-left: 10px\"> Delete</button>\n                <button (click) = \"employeeDetails(employee.id)\" class = \"btn btn-primary\" style=\"margin-left: 10px\"> View</button>\n            </td>\n        </tr>\n    </tbody>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { Employee } from \"./../../models/employee\";\nimport { EmployeeService } from \"./../../services/employee.service\";\n\n/**\nDefines the Route object that maps a URL path to a component,\nand the RouterOutlet directive that you use to place a routed view in a template,\nas well as a complete API for configuring, querying, and controlling the router state.\n */\nimport { Router } from \"@angular/router\";\n\n//generated from the command ng g c employee-list in the app folder\n\n@Component({\n\tselector: 'app-employee-list',\n\ttemplateUrl: './employee-list.component.html',\n\tstyleUrls: ['./employee-list.component.scss']\n})\nexport class EmployeeListComponent implements OnInit {\n\n\temployees: Employee[];\n\n\tconstructor(private employeeService: EmployeeService, private router: Router) { }\n\n\tngOnInit(): void {\n\t\tthis.getEmployees();\n\t}\n\n\tprivate getEmployees() {\n\n\t\t/**\n\t\tObservable.subscribe\n\t\tLe point commun entre tous les \"observables\" est la méthode subscribe qui permet de souscrire à un Observable \n\t\tet être notifié des nouvelles valeurs, des erreurs ou de la fin du \"stream\".\n\t\timport { interval } from 'rxjs';\n\t\t​\n\t\tconst data$ = interval(1000);\n\t\t\n\t\tdata$.subscribe(value => console.log(value));\n\t\t\n\t\tNous pouvons ensuite ajouter les \"callbacks\" de capture d'\"erreur\" ou de fin du \"stream\" \n\t\ten passant un objet à la méthode subscribe avec les trois callbacks suivantes : next, error et complete.\n\t\t\n\t\tdata$.subscribe({\n\t\t\tnext: value => console.log(value),\n\t\t\terror: err => console.error(err),\n\t\t\tcomplete: () => console.log('DONE!')\n\t\t});\t\t\n\t\t*/\n\t\tthis.employeeService.getEmployeesList().subscribe(data => {\n\t\t\tthis.employees = data;\n\t\t})\n\t}\n\n\temployeeDetails(id: number) {\n\t\tthis.router.navigate(['employee-details', id]);\n\t}\n\t\n\tupdateEmployee(id: number) {\n\t\tthis.router.navigate(['update-employee', id]);\n\t}\n\n\tdeleteEmployee(id:number) {\n\t\tthis.employeeService.deleteEmployee(id).subscribe( data => {\n\t\t\tconsole.log(data);\n\t\t\tthis.getEmployees();\n\t\t})\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}